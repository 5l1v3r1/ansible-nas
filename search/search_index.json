{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"After getting burned by broken FreeNAS updates one too many times, I figured I could do a much better job myself using just a stock Ubuntu install, some clever Ansible config and a bunch of Docker containers. Ansible-NAS was born! Features An awesome dashboard to your home server (Heimdall) Any number of Samba shares for you to store your stuff A BitTorrent client Various media management tools - Sonarr, Sickrage, CouchPotato, Radarr Media streaming via Plex or Emby Music streaming with Airsonic A Dropbox replacement via Nextcloud Various ways to see stats about your NAS - Glances, dashboards in Grafana A backup tool - allows scheduled backups to Amazon S3, OneDrive, Dropbox etc An IRC bouncer Source control with Gitea SSL secured external access to some applications via Traefik A Docker host with Portainer management - run anything that's shipped as a Docker container Getting Started Head to installation if you're ready to roll, or testing if you want to spin up a test VM first. If this is all very confusing, there is also an overview of the project and what is required for complete beginners.","title":"Home"},{"location":"#features","text":"An awesome dashboard to your home server (Heimdall) Any number of Samba shares for you to store your stuff A BitTorrent client Various media management tools - Sonarr, Sickrage, CouchPotato, Radarr Media streaming via Plex or Emby Music streaming with Airsonic A Dropbox replacement via Nextcloud Various ways to see stats about your NAS - Glances, dashboards in Grafana A backup tool - allows scheduled backups to Amazon S3, OneDrive, Dropbox etc An IRC bouncer Source control with Gitea SSL secured external access to some applications via Traefik A Docker host with Portainer management - run anything that's shipped as a Docker container","title":"Features"},{"location":"#getting-started","text":"Head to installation if you're ready to roll, or testing if you want to spin up a test VM first. If this is all very confusing, there is also an overview of the project and what is required for complete beginners.","title":"Getting Started"},{"location":"contributing/","text":"Contributing Contributing to Ansible-NAS is easy! Add your functionality, then raise a pull request on GitHub. A few things to bear in mind: Restrict pull requests to one piece of functionality or bugfix at a time. Test your new functionality or bugfix using the included tests/test-vagrant.sh script to spin up a test VM. Run ansible-lint against the playbook before committing. (There is a VSCode task set up to run the right command for you) Ensure that your PR only changes files required for your functionality or bugfix. If you're adding a new application: Ensure that all added parameters are also included in tests/test.yml . Ensure that the new application is disabled by default. Add a documentation page to docs/applications/ - use an existing application as an example. Add the frontend port to docs/configuration/application_ports.md , ensuring you've not clashed with an existing application.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributing to Ansible-NAS is easy! Add your functionality, then raise a pull request on GitHub. A few things to bear in mind: Restrict pull requests to one piece of functionality or bugfix at a time. Test your new functionality or bugfix using the included tests/test-vagrant.sh script to spin up a test VM. Run ansible-lint against the playbook before committing. (There is a VSCode task set up to run the right command for you) Ensure that your PR only changes files required for your functionality or bugfix. If you're adding a new application: Ensure that all added parameters are also included in tests/test.yml . Ensure that the new application is disabled by default. Add a documentation page to docs/applications/ - use an existing application as an example. Add the frontend port to docs/configuration/application_ports.md , ensuring you've not clashed with an existing application.","title":"Contributing"},{"location":"installation/","text":"You can run Ansible-NAS from the computer you plan to use for your NAS, or from a remote controlling machine. The steps for deployment are exactly the same, just pay attention to editing the inventory file in step 7. Enable the Ubuntu Universe repository: sudo add-apt-repository universe Install Ansible: sudo apt install ansible git clone https://github.com/davestephens/ansible-nas.git cd ansible-nas Copy group_vars/all.yml.dist to group_vars/all.yml . Open up group_vars/all.yml and follow the instructions there for configuring your Ansible NAS. If you plan to use Transmission with OpenVPN, also copy group_vars/vpn_credentials.yml.dist to group_vars/vpn_credentials.yml and fill in your settings. Copy inventory.dist to inventory and update it. Install the dependent roles: ansible-galaxy install -r requirements.yml (you might need sudo to install Ansible roles) Run the playbook - something like ansible-playbook -i inventory nas.yml -b -K should do you nicely.","title":"Installation"},{"location":"overview/","text":"Ansible-NAS currently assumes you know your way around a server. This page is an overview for absolute NAS beginners so they can decide if it is right for them. The big picture To start off really simple: A NAS ( Network Attached Storage ) is a server mostly for home or other small networks that offers file storage. It's usually a small box that sits in the corner and runs 24/7. These days, a NAS doesn't just only handle files, but also offers other services, for instance video streaming with Plex or Emby . You can buy consumer NAS boxes from various manifacturers where you just have to add the hard drives, or you can configure your own hardware and use open-source software as the operating system. One example of the second variant you'll see mentioned here is FreeNAS . It is based on FreeBSD , which like Linux belongs to the family of Unix-like operating systems. One strength of FreeBSD/FreeNAS is that it includes the powerful ZFS file system ( OpenZFS , to be exact). However, it does not support the Docker containers the way Linux does. Also, the Linux ecosystem is larger. On the other hand, very few Linux distributions include ZFS out of the box because of licensing issues. Ansible-NAS in its default form attempts to have the best of both worlds by using Docker on Linux with ZFS. This is possible because the Ubuntu Linux distribution supports both technologies. As the name says, Ansible-NAS uses Ansible server automation which is usually deployed on big multi-machine enterprise systems, not small home servers the size of a breadbox. Before you take the plunge The commercial NAS vendors try to make setting up and running a NAS as simple and painless as possible - for a fee, obviously. The open-source NAS software providers have lots of resources to help you get started with your own hardware. FreeNAS for instance comes with extensive documentation, good introductions to ZFS and other topics, and a large community to lean on. With Ansible-NAS, at this point at least, you're pretty much on your own. Though there is a Gitter chat room (see support ), you're expected to have some familiarity with the technologies involved and be able to set up the basic stuff yourself. As a to-do list, before you can even install Ansible-NAS, you'll have to: Choose, buy, configure, and test your own hardware . Note that ZFS loves RAM - it will run with 1 GB , but it won't be happy. The ZFS on Linux (ZoL) people recommend at least 8 GB for best performance, but the more, the better. As robust as ZFS is, it assumes the data in memory is correct, so very bad things happen to your data if there is memory corruption. For this reason, it is strongly recommended to use ECC RAM. ZFS also prefers to have the hard drives all to itself. If you're paranoid (a good mindset when dealing with servers), you'll probably want an uninterruptible power supply (UPS) of some sort as well and SMART monitoring for your hard drives. See the FreeNAS hardware requirements as a guideline. Install Ubuntu Server , preferably a Long Term Support (LTS) edition such as 18.04, and keep it updated. You'll probably want to perform other basic setup tasks like hardening SSH and including email notifications. There are various guides for this, but if you're just getting started, you'll probably need a book. Install ZFS and set up storage. This includes creating data sets for various parts of the system, some form of automatic snapshot handling, and possibly automatic backups to another server or an external hard drive. Currently on Linux, it is something of a hassle to use ZFS on the root file system. If you are completely new to ZFS, expect a brutal learning curve. There is a slightly dated (2012) but extensive introduction to ZFS on Linux by Aaron Toponce to get you started, or you can watch this video that introduces the philosophy and big picture of ZFS. After that, you can continue with the actual installation of Ansible-NAS. How to experiment The easiest way to take Ansible-NAS for a spin is in a virtual machine, for instance in VirtualBox . You'll want to create three virtual hard drives for testing: One of the actual NAS, and the two others to create a mirrored ZFS pool. Note because of the RAM requirements of ZFS, you might run into problems with a virtual machine, but this will let you experiment with installing, configuring, and running a complete system.","title":"Overview"},{"location":"overview/#the-big-picture","text":"To start off really simple: A NAS ( Network Attached Storage ) is a server mostly for home or other small networks that offers file storage. It's usually a small box that sits in the corner and runs 24/7. These days, a NAS doesn't just only handle files, but also offers other services, for instance video streaming with Plex or Emby . You can buy consumer NAS boxes from various manifacturers where you just have to add the hard drives, or you can configure your own hardware and use open-source software as the operating system. One example of the second variant you'll see mentioned here is FreeNAS . It is based on FreeBSD , which like Linux belongs to the family of Unix-like operating systems. One strength of FreeBSD/FreeNAS is that it includes the powerful ZFS file system ( OpenZFS , to be exact). However, it does not support the Docker containers the way Linux does. Also, the Linux ecosystem is larger. On the other hand, very few Linux distributions include ZFS out of the box because of licensing issues. Ansible-NAS in its default form attempts to have the best of both worlds by using Docker on Linux with ZFS. This is possible because the Ubuntu Linux distribution supports both technologies. As the name says, Ansible-NAS uses Ansible server automation which is usually deployed on big multi-machine enterprise systems, not small home servers the size of a breadbox.","title":"The big picture"},{"location":"overview/#before-you-take-the-plunge","text":"The commercial NAS vendors try to make setting up and running a NAS as simple and painless as possible - for a fee, obviously. The open-source NAS software providers have lots of resources to help you get started with your own hardware. FreeNAS for instance comes with extensive documentation, good introductions to ZFS and other topics, and a large community to lean on. With Ansible-NAS, at this point at least, you're pretty much on your own. Though there is a Gitter chat room (see support ), you're expected to have some familiarity with the technologies involved and be able to set up the basic stuff yourself. As a to-do list, before you can even install Ansible-NAS, you'll have to: Choose, buy, configure, and test your own hardware . Note that ZFS loves RAM - it will run with 1 GB , but it won't be happy. The ZFS on Linux (ZoL) people recommend at least 8 GB for best performance, but the more, the better. As robust as ZFS is, it assumes the data in memory is correct, so very bad things happen to your data if there is memory corruption. For this reason, it is strongly recommended to use ECC RAM. ZFS also prefers to have the hard drives all to itself. If you're paranoid (a good mindset when dealing with servers), you'll probably want an uninterruptible power supply (UPS) of some sort as well and SMART monitoring for your hard drives. See the FreeNAS hardware requirements as a guideline. Install Ubuntu Server , preferably a Long Term Support (LTS) edition such as 18.04, and keep it updated. You'll probably want to perform other basic setup tasks like hardening SSH and including email notifications. There are various guides for this, but if you're just getting started, you'll probably need a book. Install ZFS and set up storage. This includes creating data sets for various parts of the system, some form of automatic snapshot handling, and possibly automatic backups to another server or an external hard drive. Currently on Linux, it is something of a hassle to use ZFS on the root file system. If you are completely new to ZFS, expect a brutal learning curve. There is a slightly dated (2012) but extensive introduction to ZFS on Linux by Aaron Toponce to get you started, or you can watch this video that introduces the philosophy and big picture of ZFS. After that, you can continue with the actual installation of Ansible-NAS.","title":"Before you take the plunge"},{"location":"overview/#how-to-experiment","text":"The easiest way to take Ansible-NAS for a spin is in a virtual machine, for instance in VirtualBox . You'll want to create three virtual hard drives for testing: One of the actual NAS, and the two others to create a mirrored ZFS pool. Note because of the RAM requirements of ZFS, you might run into problems with a virtual machine, but this will let you experiment with installing, configuring, and running a complete system.","title":"How to experiment"},{"location":"support/","text":"Support Getting support for Ansible-NAS is easy! Gitter.im Ansible-NAS has its own Gitter chat room. davestephens hangs out there as well as a few existing users. Come say hi! GitHub Issues Raise an issue , using the supplied template to provide as much information as possible.","title":"Support"},{"location":"support/#support","text":"Getting support for Ansible-NAS is easy!","title":"Support"},{"location":"support/#gitterim","text":"Ansible-NAS has its own Gitter chat room. davestephens hangs out there as well as a few existing users. Come say hi!","title":"Gitter.im"},{"location":"support/#github-issues","text":"Raise an issue , using the supplied template to provide as much information as possible.","title":"GitHub Issues"},{"location":"testing/","text":"Vagrant A Vagrant Vagrantfile and launch script ( tests/test-vagrant.sh ) are provided to spin up a testing VM. The config in tests/test.yml is used by the script to override any existing config in group_vars/all.yml . By default the VM will be available on 172.30.1.5. If everything has worked correctly after running tests/test-vagrant.sh , you should be able to connect to Heimdall on http://172.30.1.5:10080. After making changes to the playbook, you can apply them to the running VM by running vagrant provision . Once you're done testing, destroy the VM with vagrant destroy . Travis CI Travis CI runs some sanity checks against branches once pushed to GitHub. These can be viewed here . ansible-lint ansible-lint is run as part of the CI (and VSCode tasks are provided) to ensure the playbook confirms to some sort of standard! You may or may not agree with all of the rules, but using it keeps things nice and consistent. Syntax Checking ansible-playbook --syntax-check is run against nas.yml to ensure nothing is majorly broken.","title":"Testing"},{"location":"testing/#vagrant","text":"A Vagrant Vagrantfile and launch script ( tests/test-vagrant.sh ) are provided to spin up a testing VM. The config in tests/test.yml is used by the script to override any existing config in group_vars/all.yml . By default the VM will be available on 172.30.1.5. If everything has worked correctly after running tests/test-vagrant.sh , you should be able to connect to Heimdall on http://172.30.1.5:10080. After making changes to the playbook, you can apply them to the running VM by running vagrant provision . Once you're done testing, destroy the VM with vagrant destroy .","title":"Vagrant"},{"location":"testing/#travis-ci","text":"Travis CI runs some sanity checks against branches once pushed to GitHub. These can be viewed here .","title":"Travis CI"},{"location":"testing/#ansible-lint","text":"ansible-lint is run as part of the CI (and VSCode tasks are provided) to ensure the playbook confirms to some sort of standard! You may or may not agree with all of the rules, but using it keeps things nice and consistent.","title":"ansible-lint"},{"location":"testing/#syntax-checking","text":"ansible-playbook --syntax-check is run against nas.yml to ensure nothing is majorly broken.","title":"Syntax Checking"},{"location":"upgrading/","text":"Upgrading Pull the latest Ansible-NAS repo, merge any new config sections from group_vars/all.yml.dist into your group_vars/all.yml , then run the playbook.","title":"Upgrading"},{"location":"upgrading/#upgrading","text":"Pull the latest Ansible-NAS repo, merge any new config sections from group_vars/all.yml.dist into your group_vars/all.yml , then run the playbook.","title":"Upgrading"},{"location":"applications/airsonic/","text":"Airsonic Homepage: https://airsonic.github.io/ Airsonic is a free, web-based media streamer, providing ubiquitous access to your music. Use it to share your music with friends, or to listen to your own music while at work. You can stream to multiple players simultaneously, for instance to one player in your kitchen and another in your living room Usage Set airsonic_enabled: true in your group_vars/all.yml file. The Airsonic web interface can be found at http://ansible_nas_host_or_ip:4040. Specific Configuration The default username and password is admin - you'll need to change this immediately after logging in.","title":"Airsonic"},{"location":"applications/airsonic/#airsonic","text":"Homepage: https://airsonic.github.io/ Airsonic is a free, web-based media streamer, providing ubiquitous access to your music. Use it to share your music with friends, or to listen to your own music while at work. You can stream to multiple players simultaneously, for instance to one player in your kitchen and another in your living room","title":"Airsonic"},{"location":"applications/airsonic/#usage","text":"Set airsonic_enabled: true in your group_vars/all.yml file. The Airsonic web interface can be found at http://ansible_nas_host_or_ip:4040.","title":"Usage"},{"location":"applications/airsonic/#specific-configuration","text":"The default username and password is admin - you'll need to change this immediately after logging in.","title":"Specific Configuration"},{"location":"applications/cloudflare_ddns/","text":"Cloudflare Dynamic DNS Updater Homepage: https://github.com/joshuaavalon/docker-cloudflare Cloudflare: https://www.cloudflare.com If you want your Ansible-NAS accessible externally then you'll need a domain name. You'll also need to set a wildcard host A record to point to your static IP, or enable this container to automatically update Cloudflare with your dynamic IP address. Usage Set cloudflare_ddns_enabled: true in your group_vars/all.yml file. Specific Configuration Make sure you set your Cloudflare login, domain and API key details within your group_vars/all.yml file.","title":"Cloudflare Dynamic DNS Updater"},{"location":"applications/cloudflare_ddns/#cloudflare-dynamic-dns-updater","text":"Homepage: https://github.com/joshuaavalon/docker-cloudflare Cloudflare: https://www.cloudflare.com If you want your Ansible-NAS accessible externally then you'll need a domain name. You'll also need to set a wildcard host A record to point to your static IP, or enable this container to automatically update Cloudflare with your dynamic IP address.","title":"Cloudflare Dynamic DNS Updater"},{"location":"applications/cloudflare_ddns/#usage","text":"Set cloudflare_ddns_enabled: true in your group_vars/all.yml file.","title":"Usage"},{"location":"applications/cloudflare_ddns/#specific-configuration","text":"Make sure you set your Cloudflare login, domain and API key details within your group_vars/all.yml file.","title":"Specific Configuration"},{"location":"applications/miniflux/","text":"Miniflux Homepage: https://miniflux.app/ Miniflux is a minimalist and opinionated feed reader. Usage Set miniflux_enabled: true in your group_vars/all.yml file. The Miniflux web interface can be found at http://ansible_nas_host_or_ip:8070, the default username is admin and password supersecure . Specific Configuration An admin user will be created with the username and password of miniflux_admin_username and miniflux_admin_password respectively. These can be found in the Miniflux section within all.yml.dist .","title":"Miniflux"},{"location":"applications/miniflux/#miniflux","text":"Homepage: https://miniflux.app/ Miniflux is a minimalist and opinionated feed reader.","title":"Miniflux"},{"location":"applications/miniflux/#usage","text":"Set miniflux_enabled: true in your group_vars/all.yml file. The Miniflux web interface can be found at http://ansible_nas_host_or_ip:8070, the default username is admin and password supersecure .","title":"Usage"},{"location":"applications/miniflux/#specific-configuration","text":"An admin user will be created with the username and password of miniflux_admin_username and miniflux_admin_password respectively. These can be found in the Miniflux section within all.yml.dist .","title":"Specific Configuration"},{"location":"applications/timemachine/","text":"Time Machine Apple docs: https://support.apple.com/en-us/HT201250 Docker image: https://github.com/mbentley/docker-timemachine Time Machine is an application that allows you to backup files from your Mac. Usage Set timemachine_enabled: true in your group_vars/all.yml file. Specific Configuration timemachine_data_directory The absolute path on Ansible NAS where the backup files will be stored timemachine_volume_size_limit The maximum amount of space Time Machine can use for the backups in units of MiB. Set it to 0 for no limit. timemachine_share_name The name of the share as it will appear in the Time Machine application. Default is 'TimeMachine' timemachine_password The password used to access the share. Default is 'timemachine' timemachine_log_level The verbosity of the logs. 'Error' is the default.","title":"Time Machine"},{"location":"applications/timemachine/#time-machine","text":"Apple docs: https://support.apple.com/en-us/HT201250 Docker image: https://github.com/mbentley/docker-timemachine Time Machine is an application that allows you to backup files from your Mac.","title":"Time Machine"},{"location":"applications/timemachine/#usage","text":"Set timemachine_enabled: true in your group_vars/all.yml file.","title":"Usage"},{"location":"applications/timemachine/#specific-configuration","text":"timemachine_data_directory The absolute path on Ansible NAS where the backup files will be stored timemachine_volume_size_limit The maximum amount of space Time Machine can use for the backups in units of MiB. Set it to 0 for no limit. timemachine_share_name The name of the share as it will appear in the Time Machine application. Default is 'TimeMachine' timemachine_password The password used to access the share. Default is 'timemachine' timemachine_log_level The verbosity of the logs. 'Error' is the default.","title":"Specific Configuration"},{"location":"applications/traefik/","text":"Traefik Homepage: https://traefik.io Traefik is used to provide external access to your Ansible-NAS box. Additionally, Traefik will automatically request and renew SSL certificates for you. Usage Set traefik_enabled: true in your group_vars/all.yml file. Traefik's web interface can be found at http://ansible_nas_host_or_ip:8083. Specific Configuration You'll need to map port 80 and 443 from your router to your Ansible-NAS box. A quick search should reveal instruction for your model of router.","title":"Traefik"},{"location":"applications/traefik/#traefik","text":"Homepage: https://traefik.io Traefik is used to provide external access to your Ansible-NAS box. Additionally, Traefik will automatically request and renew SSL certificates for you.","title":"Traefik"},{"location":"applications/traefik/#usage","text":"Set traefik_enabled: true in your group_vars/all.yml file. Traefik's web interface can be found at http://ansible_nas_host_or_ip:8083.","title":"Usage"},{"location":"applications/traefik/#specific-configuration","text":"You'll need to map port 80 and 443 from your router to your Ansible-NAS box. A quick search should reveal instruction for your model of router.","title":"Specific Configuration"},{"location":"applications/transmission/","text":"Transmission Homepage: https://transmissionbt.com/ Transmission is a free BitTorrent client. Two versions are provided - one that tunnels through a VPN and one that connects directly. Usage Set transmission_enabled: true , or transmission_with_openvpn_enabled: true in your group_vars/all.yml file. Transmission's web interface can be found at http://ansible_nas_host_or_ip:9091 (with VPN) or http://ansible_nas_host_or_ip:9092 (without VPN). Specific Configuration If you enable Tranmission with OpenVPN, you'll need to copy group_vars/vpn_credentials.yml.dist to group_vars/vpn_credentials.yml and fill in your settings.","title":"Transmission"},{"location":"applications/transmission/#transmission","text":"Homepage: https://transmissionbt.com/ Transmission is a free BitTorrent client. Two versions are provided - one that tunnels through a VPN and one that connects directly.","title":"Transmission"},{"location":"applications/transmission/#usage","text":"Set transmission_enabled: true , or transmission_with_openvpn_enabled: true in your group_vars/all.yml file. Transmission's web interface can be found at http://ansible_nas_host_or_ip:9091 (with VPN) or http://ansible_nas_host_or_ip:9092 (without VPN).","title":"Usage"},{"location":"applications/transmission/#specific-configuration","text":"If you enable Tranmission with OpenVPN, you'll need to copy group_vars/vpn_credentials.yml.dist to group_vars/vpn_credentials.yml and fill in your settings.","title":"Specific Configuration"},{"location":"applications/watchtower/","text":"Watchtower Homepage: https://github.com/v2tec/watchtower A process for watching your Docker containers and automatically udpating and restarting them whenever their base image is refreshed. Usage Set watchtower_enabled: true in your group_vars/all.yml file. Specific Configuration By default Watchtower is configured to check daily at 5am for updates. Various notification options are available, and can be configured by updating watchtower_command in your group_vars/all.yml file. A few examples are provided. The full set of options can be found at the Watchtower GitHub project page .","title":"Watchtower"},{"location":"applications/watchtower/#watchtower","text":"Homepage: https://github.com/v2tec/watchtower A process for watching your Docker containers and automatically udpating and restarting them whenever their base image is refreshed.","title":"Watchtower"},{"location":"applications/watchtower/#usage","text":"Set watchtower_enabled: true in your group_vars/all.yml file.","title":"Usage"},{"location":"applications/watchtower/#specific-configuration","text":"By default Watchtower is configured to check daily at 5am for updates. Various notification options are available, and can be configured by updating watchtower_command in your group_vars/all.yml file. A few examples are provided. The full set of options can be found at the Watchtower GitHub project page .","title":"Specific Configuration"},{"location":"configuration/application_ports/","text":"Application Ports By default, applications can be found on the ports listed below. Application Port Notes Couchpotato 5050 Duplicati 8200 Emby 8096 HTTP Emby 8920 HTTPS Gitea 3001 Web Gitea 222 SSH Glances 61208 SSH Grafana 3000 Guacamole 8090 Heimdall 10080 Miniflux 8070 Netdata 19999 Nextcloud 8080 Plex 32400 Portainer 9000 Radarr 7878 Sickrage 8081 Sonarr 8989 Tautulli 8181 Traefik 8083 Transmission 9091 with VPN Transmission 9092 ZNC 6677","title":"Application Ports"},{"location":"configuration/application_ports/#application-ports","text":"By default, applications can be found on the ports listed below. Application Port Notes Couchpotato 5050 Duplicati 8200 Emby 8096 HTTP Emby 8920 HTTPS Gitea 3001 Web Gitea 222 SSH Glances 61208 SSH Grafana 3000 Guacamole 8090 Heimdall 10080 Miniflux 8070 Netdata 19999 Nextcloud 8080 Plex 32400 Portainer 9000 Radarr 7878 Sickrage 8081 Sonarr 8989 Tautulli 8181 Traefik 8083 Transmission 9091 with VPN Transmission 9092 ZNC 6677","title":"Application Ports"},{"location":"configuration/custom_applications/","text":"Custom Applications Using Portainer Ensure that you have portainer_enabled: true in your group_vars/all.yml file, and have run the playbook so that Portainer is up and running. Hit Portainer on http://ansible_nas_host_or_ip:9000. You can now deploy an 'App Template' or head to 'Containers' and manually enter container configuration. Using a Custom Ansible Task Needs to be docced","title":"Custom Applications"},{"location":"configuration/custom_applications/#custom-applications","text":"","title":"Custom Applications"},{"location":"configuration/custom_applications/#using-portainer","text":"Ensure that you have portainer_enabled: true in your group_vars/all.yml file, and have run the playbook so that Portainer is up and running. Hit Portainer on http://ansible_nas_host_or_ip:9000. You can now deploy an 'App Template' or head to 'Containers' and manually enter container configuration.","title":"Using Portainer"},{"location":"configuration/custom_applications/#using-a-custom-ansible-task","text":"Needs to be docced","title":"Using a Custom Ansible Task"},{"location":"configuration/router_confiiguration/","text":"Router Configuration If you want to make certain Ansible-NAS applications available outside of your home (for example Nextcloud), then you need to map ports 80 and 443 from your router to your Ansible-NAS box. How to do this is entirely dependent on your router (and out of scope of these docs), but if you're using Ansible-NAS then this should be within your skillset. :)","title":"Router Configuration"},{"location":"configuration/router_confiiguration/#router-configuration","text":"If you want to make certain Ansible-NAS applications available outside of your home (for example Nextcloud), then you need to map ports 80 and 443 from your router to your Ansible-NAS box. How to do this is entirely dependent on your router (and out of scope of these docs), but if you're using Ansible-NAS then this should be within your skillset. :)","title":"Router Configuration"},{"location":"configuration/shares/","text":"Shares Ansible-NAS uses the awesome bertvv.samba Ansible role to configure Samba - check out the project page for the many different options you can use to configure a share. Share Examples Ansible-NAS shares are defined in the samba_shares section within group_vars/all.yml . The examples provided are \"public\" shares that anyone on your LAN can read and write to. File Permissions Ansible-NAS creates an ansible-nas user and group on your server, which Samba will use to access the data in your shares. New data created will be permissioned correctly. However, if you have existing data this will need to be repermissioned so that Samba can read and serve it. An playbook is provided to do this for you - permission_data.yml . It is separated from the main Ansible-NAS playbook due to the time it can take to run with large amounts of data. You should only need to run this once.","title":"Shares"},{"location":"configuration/shares/#shares","text":"Ansible-NAS uses the awesome bertvv.samba Ansible role to configure Samba - check out the project page for the many different options you can use to configure a share.","title":"Shares"},{"location":"configuration/shares/#share-examples","text":"Ansible-NAS shares are defined in the samba_shares section within group_vars/all.yml . The examples provided are \"public\" shares that anyone on your LAN can read and write to.","title":"Share Examples"},{"location":"configuration/shares/#file-permissions","text":"Ansible-NAS creates an ansible-nas user and group on your server, which Samba will use to access the data in your shares. New data created will be permissioned correctly. However, if you have existing data this will need to be repermissioned so that Samba can read and serve it. An playbook is provided to do this for you - permission_data.yml . It is separated from the main Ansible-NAS playbook due to the time it can take to run with large amounts of data. You should only need to run this once.","title":"File Permissions"}]}